Option Explicit 'Requires all variables to be declared fully
Option Compare Text 'Removes case sensativity
Public G_Responsibility As String 'used to determine what kind of function is returned in the Strat/Funct/Area Check


Private Sub cmd_Updater_Click()


On Error GoTo ErrorHandler
Application.ScreenUpdating = False


Dim i As Integer 'Used to count manyyyyy things
Dim j As Integer 'Used again, to count a lot
Dim k As Integer 'Record Number Holder
Dim LastRow As Integer 'Overwritten a lot contrary to other programs.
Dim TotalSheets As Integer 'Shows the last sheet number.
Dim FormulasOne As String 'holds the sting with the respective formula
Dim P1 As Range
Dim P2 As Range
Dim String1 As String 'Holds the string for the first part of the check if statment
Dim String2 As String 'Holds the string for the Second part of the check if statment
Dim String1Boolean As Boolean 'Used to check statments in the if checks
Dim String2Boolean As Boolean 'Used to check statments in the if checks
Dim MinutesElapsed As String 'timer method
Dim StartTime As Double 'timer method
Dim PredictedRecords As Integer 'The number of records predicted in the Background tab
Dim tbl As ListObject 'Consolidate Table
Dim rng As Range 'Range specifically for the table
Dim SheetCount As Integer 'Holds the number of sheets found in the document.
Dim WorksheetName As String 'Holds the worksheet name in the check cycle.
Dim FormulaOne As String 'Holds the checking formula for the background sheet
Dim SheetResponsibility As String 'Used to find if the sheet is Strat, Funct or Area.
Dim ResponsibilityNumber As Integer 'finds the sheet number the response should go to
Dim NextRow As Integer 'Finds the next row on the apropriate sheet
Dim NextStrategicRow As Integer 'holds a constant number for the next strategic row
Dim TableName2 As String 'used for vlookup of table name


Dim a As Integer 'sum of all lastrows - 5 from each area sheet
Dim b As Integer 'Sheet position in Area section
Dim c As Integer
Dim d As Integer
Dim Destination As String
Dim UID As String
Dim Source As String
Dim formulaVSource As String
Dim MatrixLastRow As Integer
Dim e As Integer 'how many times the process has been ran
Dim f As Integer 'Position of the paste on the main sheet, is not reset between runs#
Dim formulaVDestination As String
Dim EnvString As String 'Enviromnment Holder

'Wait Variables
Dim newHour As Double
Dim newMinute As Double
Dim newSecond As Double
Dim WaitTime As Boolean

Dim DebugFile As Integer



If MsgBox("Warning, Previous Data may be overwritten. Continue?", vbYesNo, "Warning.") = vbNo Then
    Exit Sub
End If

DebugFile = FreeFile()
'EnvString = Environ("Userprofile")    ' Get environment
Open (Environ("UserProfile") & "\Desktop\Debug.txt") For Output As #DebugFile
'Open ""%userprofile%\Desktop\Debug.txt"" For Output As #DebugFile

'Remember time when macro starts
  StartTime = Timer

    SheetCount = ThisWorkbook.Sheets.Count
    'I want to add some kind of check here to stop the following loop occurring if the system hasnt been changed since the last use.
    
    
    
    i = 1
    Do Until i = SheetCount + 1
        Worksheets(i).Activate
        WorksheetName = ActiveSheet.Name
        Debug.Print "WrkSht Name: " & WorksheetName
        Print #DebugFile, "WrkSht Name: " & WorksheetName
        If WorksheetName = "Background" Then
            i = i + 1
        Else
            Worksheets("Background").Range("A" & i + 1).Value = i
            Worksheets("Background").Range("B" & i + 1).Value = WorksheetName
            Worksheets("Background").Range("C" & i + 1).Value = "IF(AND(OR('" & WorksheetName & "'!G6=""Yes"", '" & WorksheetName & "'!G6=""For Noting""),'" & WorksheetName & "'!P6=""Open""), 1, 0)" 'Need to check this works.
            i = i + 1
        End If
    Loop
    
    Print #DebugFile, "-----------------------------------------------------------------"
    
    i = 2
    j = 1
    
    On Error Resume Next
    Do Until i = 11
        RemoveOldData i
        Debug.Print "WrkSht " & Application.WorksheetFunction.VLookup(i, Worksheets("Background").Range("A2:B21"), 2, False) & " has been cleared."
        Print #DebugFile, "WrkSht " & Application.WorksheetFunction.VLookup(i, Worksheets("Background").Range("A2:B21"), 2, False) & " has been cleared."
        i = i + 1
    Loop
    
    On Error GoTo ErrorHandler
    Print #DebugFile, "-----------------------------------------------------------------"
    i = 1
    
    Do Until i = SheetCount + 1
        If IsEmpty(Worksheets("Background").Range("B" & i + 1).Value) = True Then 'Finds out if Cells in Col B are empty for skipping (e.g. Background tab)
            i = i + 1
        Else
            If IsEmpty(Worksheets("Background").Range("F" & i + 1).Value) = False Then 'Finds if the cells in Col F are already filled
                i = i + 1
                j = j + 1 'used in the checking of filled cells
            Else 'Fills the responsibility in (Col F)
                WorksheetName = Worksheets("Background").Range("B" & i + 1).Value
                Load UserForm1
                UserForm1.lbl_ResponsabilityArea = WorksheetName
                UserForm1.Tag = i + 1
                UserForm1.Show
                i = i + 1
            End If
        End If
    Loop
    
    If j + 1 = i Then 'Updating responsibility loop, disregardable if desired
        
        If MsgBox("Do you want to update the Responsabilities for each tab?", vbYesNo, "Update Responsabilities?") = vbYes Then
            i = 1
            
            Do Until i = SheetCount + 1
                If IsEmpty(Worksheets("Background").Range("B" & i + 1).Value) = True Then 'Finds out if Cells in Col B are empty for skipping (e.g. Background tab)
                    
                    i = i + 1
                
                Else
                    
                    Do Until i = SheetCount + 1 'Copied from the loop above.
                        WorksheetName = Worksheets("Background").Range("B" & i + 1).Value
                        Load UserForm1
                        UserForm1.lbl_ResponsabilityArea = WorksheetName
                        UserForm1.Tag = i + 1
                        UserForm1.Show
                        i = i + 1
                    Loop
                
                End If
            
            Loop
            
        End If
    
    End If
    
    Worksheets("Background").Activate
    With ActiveSheet
        LastRow = .Cells(.Rows.Count, 9).End(xlUp).Row
        .Range("I2:Z" & LastRow * 2).Clear
    End With
    
    Worksheets("Strategic POTW").Activate
    With ActiveSheet
        LastRow = .Cells(.Rows.Count, 2).End(xlUp).Row
        .Range("B6:Q" & LastRow * 2).Clear
    End With
    
    
    i = 2 'Sets the sheet to #3, skipping background and POTW
    j = 2 'sets the paste location as row 2 on Background.
    TotalSheets = ThisWorkbook.Sheets.Count
    
    
    Do Until i = TotalSheets + 1
        
        With Worksheets(i)
            
            LastRow = Worksheets(i).Cells(.Rows.Count, 7).End(xlUp).Row
            Worksheets("Background").Range("D" & j).Value = LastRow
            LastRow = 0
            i = i + 1
            j = j + 1
            LastRow = 0
            'This stopped two rows short 'Should now be fixed
        
        End With
        
    Loop
    
    a = 0 'Self Assigning
    b = 11 'Manually Assigned
    c = 6 'Manually Asigned
    d = 0 'Self Assigning
    e = 12 'Manually set then self assigning
    f = 3 'Manually Assigned
        
    Do Until b = SheetCount + 1 'Loop to find the total number of records in all area sheets
        Worksheets(b).Activate
            With ActiveSheet
                a = a + (Worksheets(b).Cells(.Rows.Count, 2).End(xlUp).Row - 5)
            End With
        b = b + 1
    Loop
        
    Debug.Print "a: " & a
    newHour = Hour(Now()) 'current hour
    newMinute = Minute(Now()) 'current minute
    newSecond = Second(Now()) + 10 'current seconds + 10 seconds
    WaitTime = TimeSerial(newHour, newMinute, newSecond) 'current time + 10 seconds in boolean form
    Application.Wait WaitTime 'pauses the program for 10 seconds.
    
    b = 11
        
    Do Until b = SheetCount + 1 'begins to transpose the UID and stuff to one common matrix for use later in the program.
        Worksheets(b).Activate
        d = Worksheets("Background").Range("D" & e) 'Sets the last row of the desired sheet
        
        Do Until c = d + 1 'Loops through each row to max row on the rquired sheet
            UID = ActiveSheet.Range("B" & c) 'Gets the UID of the row
            Destination = ActiveSheet.Range("H" & c) 'Gets the destination of the row
            Source = ActiveSheet.Name 'Gets sheets name from the active sheet
            
            Debug.Print "UID: " & UID & " - Destination: " & Destination & " - Source: " & Source 'debug line
            Print #DebugFile, "UID: " & UID & " - Destination: " & Destination & " - Source: " & Source
            
            formulaVSource = "=VLOOKUP(AH" & f & ", $AM$3:$AN$22, 2, ""FALSE"")" 'Standard VLOOKUP
            formulaVDestination = "=VLOOKUP(AJ" & f & ", $AM$3:$AN$22, 2, ""FALSE"")" 'Standard VLOOKUP
            
            Debug.Print "Sheet Lookup: " & formulaVSource & " - Destination Lookup: " & formulaVDestination
            'Print #DebugFile, "Sheet Lookup: " & formulaVSource & " - Destination Lookup: " & formulaVDestination
            
            Worksheets("Background").Range("AG" & f).Value = UID 'changes the column UID etc. to the alues of their namesake. Can be used to lookup a destination later.
            Worksheets("Background").Range("AH" & f).Value = Source
            Worksheets("Background").Range("AI" & f).Formula = formulaVSource
            Worksheets("Background").Range("AJ" & f).Value = Destination
            Worksheets("Background").Range("AK" & f).Formula = formulaVDestination
            
            c = c + 1 'Next Row
            f = f + 1 'Next Paste Row
        Loop
        
        b = b + 1
        c = 6
        d = 0
        e = e + 1
    
    Loop
        
    Print #DebugFile, "-----------------------------------------------------------------"

'GoTo DebugSkip
'// COMMENTS HERE PLEASE
    
    i = 3
    j = 9
        
    Worksheets("Background").Range("I2:Z10000").Clear
        
    Do Until i = TotalSheets + 1
    
        FormulaOne = "=" & Worksheets("Background").Range("C" & i).Value
        LastRow = Worksheets("Background").Range("D" & i).Value
    
        Set P1 = Cells(i, j)
        Set P2 = Cells(i, LastRow)
    
        Sheets("Background").Activate
        With ActiveSheet
            Worksheets("Background").Range(.Cells(2, j), .Cells(LastRow, j)).Formula = FormulaOne
            'This just didnt work
        End With
        
        j = j + 1
        i = i + 1
        FormulaOne = ""
        LastRow = 0
    
    Loop
    
    PredictedRecords = Worksheets("Background").Range("AD2").Value
    MsgBox "There are an estimated " & PredictedRecords & " records available.", vbInformation, "Record Estimate."
    Print #DebugFile, "Prediction Routine Complete"
    Print #DebugFile, "There are an estimated " & PredictedRecords & " records available.", vbInformation, "Record Estimate."
    Print #DebugFile, "-----------------------------------------------------------------"
    
'DebugSkip:
    
    i = 11 'Starting Worksheet (Worksheet Position Indicator) 'Starts at areas
    j = 6 'Starting Cell Position (Cell Position in Second Loop)
    k = 6 'Paste Position of Rows on Strat POTW Sheet
    
    LastRow = Worksheets("Background").Range("H4").Value
     
'GoTo DebugSkip
    
    Do Until i = TotalSheets + 1 'this is overflowing at some point.
    
'// THIS ALL NEEDS COMMENTING AS AN EXPLANATION
    If i = i Then
    End If
        Do Until j = LastRow
        
        
        String1 = Worksheets(i).Range("P" & j).Value
        String2 = Worksheets(i).Range("G" & j).Value
        
        SheetResponsibility = Worksheets(i).Range("H" & j).Value
        
        If String1 = "Open" Then
            String1Boolean = True
        Else
            String1Boolean = False
        End If
        
        If String2 = "Y" Then
            String2Boolean = True
        ElseIf String2 = "Yes" Then
            String2Boolean = True
        ElseIf String2 = "For Noting" Then
            String2Boolean = True
        Else
            String2Boolean = False
        End If
        
        If String1 = "" Then
            If String2 = "" Then
                GoTo Skip
            End If
        End If
        
        
        
        On Error Resume Next
        ResponsibilityNumber = Application.WorksheetFunction.VLookup(SheetResponsibility, Worksheets("Background").Range("AM3:AN22"), 2, False)   'Response Sheet Number
        NextRow = Application.WorksheetFunction.VLookup(ResponsibilityNumber, Worksheets("Background").Range("AP3:AQ22"), 2, False) 'Next row for the desired response
        NextStrategicRow = Worksheets("Background").Range("AQ4").Value 'Strategic row Value
        
        If String1Boolean = True And String2Boolean = True Then
                Worksheets(i).Rows(j).EntireRow.Copy
                Worksheets("Strategic POTW").Range("A" & NextStrategicRow).PasteSpecial xlPasteAll 'Error Pasting, Run to completion for error 'Fixed by setting the value to A instead of B... Case sensative?
                Worksheets(ResponsibilityNumber).Range("A" & NextRow).PasteSpecial xlPasteAll
                k = k + 1
                Debug.Print "Sheet Number: " & i & " - Row Number: " & j & " Pasting To SAPOTW and " & SheetResponsibility
                Print #DebugFile, "Sheet Number: " & i & " - Row Number: " & j & " Pasting To SAPOTW and " & SheetResponsibility
                
                'Debug.Print "I: " & i & " - J: " & j & " - K: " & k & " - LR: " & LastRow & " - Rpb: " & SheetResponsibility
        Else
                Worksheets(i).Rows(j).EntireRow.Copy
                Worksheets(ResponsibilityNumber).Range("A" & NextRow).PasteSpecial xlPasteAll
                k = k + 1
                Debug.Print "Sheet Number: " & i & " - Row Number: " & j & " Pasting To " & SheetResponsibility; " ONLY"
                Print #DebugFile, "Sheet Number: " & i & " - Row Number: " & j & " Pasting To " & SheetResponsibility; " ONLY"
                
                'Debug.Print "I: " & i & " - J: " & j & " - K: " & k & " - LR: " & LastRow & " - Rpb: " & SheetResponsibility
        End If
        
        j = j + 1
        
        Debug.Print "Sheet Number: " & i & " - Increasing Row Number by One to: " & j
        Print #DebugFile, "Sheet Number: " & i & " - Increasing Row Number by One to: " & j

        'Debug.Print "I: " & i & " - J: " & j & " - K: " & k & " - LR: " & LastRow
        
        Loop
        
Skip:
        i = i + 1
        j = 6
        
        'LastRow = Worksheets("Background").Range("D" & i - 1)
        Debug.Print "Increasing Sheet Number by One to: " & i & " - Resetting Row Number: " & j & " - Current SAPOTW Paste Row " & k
        Print #DebugFile, "Increasing Sheet Number by One to: " & i & " - Resetting Row Number: " & j & " - Current SAPOTW Paste Row " & k
        'Debug.Print "I: " & i & " - J: " & j & " - K: " & k & " - LR: " & LastRow
        
    Loop
    
DebugSkip:

    Debug.Print "Exiting Pass Forwards Loop"
    Print #DebugFile, "Exiting Pass Forwards Loop"

    Print #DebugFile, "-----------------------------------------------------------------"
  
    On Error GoTo ErrorHandler
    
    i = 2
    Do Until i = TotalSheets + 1
        
        Worksheets(i).Activate
        
        With ActiveSheet
            LastRow = .Cells(.Rows.Count, 2).End(xlUp).Row
        End With
        
        Worksheets(i).Range("B6:Q" & LastRow + 100).ClearFormats
        Print #DebugFile, "Entering Table_Formatter Function, Focus: Sheet " & i & " - " & Application.WorksheetFunction.VLookup(i, Worksheets("Background").Range("A2:B21"), 2, False) & ". Debugging OFF"
        
        
        TableName2 = Application.WorksheetFunction.VLookup(i, Worksheets("Background").Range("AS3:AT21"), 2, False)
        TableFormatter TableName2, i
        
        Print #DebugFile, "Table_Formatter, Sheet " & i & " - " & Application.WorksheetFunction.VLookup(i, Worksheets("Background").Range("A2:B21"), 2, False) & " : Exiting Function - Sucsessfully. Debugging ON"
        Print #DebugFile, "-----------------------------------------------------------------"
        
        i = i + 1
        
    Loop
    
    Worksheets("Strategic POTW").Activate
        
    
'    With ActiveSheet
'
'        LastRow = .Cells(.Rows.Count, 2).End(xlUp).Row
'        Set tbl = .ListObjects("Consolidate")
'        i = tbl.Range.Rows.Count
'
'        If i > k Then
'            j = i - k - 5
'            Set rng = Range("Consolidate[#All]").Resize(tbl.Range.Rows.Count - j, tbl.Range.Columns.Count)
'        ElseIf i < k Then
'            j = k - i - 5
'              Set rng = Range("Consolidate[#All]").Resize(tbl.Range.Rows.Count + j, tbl.Range.Columns.Count)
'        ElseIf i = k Then
'            GoTo Leave
'        Else
'            MsgBox "MS Excel has generated the following error" & vbCrLf & vbCrLf & "Error Number: 24739" & vbCrLf & "Error Source: Table Resize Event" & vbCrLf & "Error Description: Unspecified Error occured when updating the table size.", vbCritical, "An Error has Occured!"
'            GoTo Leave
'        End If
'
'        tbl.Resize rng
'        .Range("B6:Q" & LastRow + 100).ClearFormats
'
'
'        'Code utalised from the source at: https://www.thespreadsheetguru.com/blog/2014/6/20/the-vba-guide-to-listobject-excel-tables
'        .Range("B6").Activate
'    End With
    
    GoTo Leave
    
    
ErrorHandler:
    MsgBox "MS Excel has generated the following error" & vbCrLf & vbCrLf & "Error Number: " & _
        Err.Number & vbCrLf & "Error Source: Critical Events Combination" & vbCrLf & "Error Description: " & _
        Err.Description, vbCritical, "An Error has Occured!"
        MinutesElapsed = Format((Timer - StartTime) / 86400, "hh:mm:ss")
        Print #DebugFile, "MS Excel has generated the following error" & vbCrLf & vbCrLf & "Error Number: " & _
        Err.Number & vbCrLf & "Error Source: Critical Events Combination" & vbCrLf & "Error Description: " & _
        Err.Description & " - This process ran unsuccessfully for " & MinutesElapsed & " minutes" & vbNewLine & vbNewLine & k - 6 & " record have been processed out of a predicted " & PredictedRecords
        Close #DebugFile
    Exit Sub
    
Leave:
    
        
    
        Worksheets("Strategic POTW").Activate
        
        'Determine how many seconds code took to run
        MinutesElapsed = Format((Timer - StartTime) / 86400, "hh:mm:ss")
        
        'Notify user in seconds (modify as and when required)
        MsgBox "This process ran successfully in " & MinutesElapsed & " minutes" & vbNewLine & vbNewLine & k - 6 & " record have been processed out of a predicted " & PredictedRecords & vbNewLine & "This number may vary due to formula case sensetivity.", vbInformation
        Print #DebugFile, "This process ran successfully in " & MinutesElapsed & " minutes" & vbNewLine & vbNewLine & k - 6 & " record have been processed out of a predicted " & PredictedRecords
        Close #DebugFile
        
Application.ScreenUpdating = True
    
End Sub
