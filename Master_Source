Option Compare Text

Private Sub cmd_Updater_Click()


On Error GoTo ErrorHandler
Application.ScreenUpdating = False


Dim i As Integer 'Used to count manyyyyy things
Dim j As Integer 'Used again, to count a lot
Dim LastRow As Integer 'Overwritten a lot contrary to other programs.
Dim TotalSheets As Integer 'Shows the last sheet number.
Dim FormulasOne As String 'holds the sting with the respective formula
Dim P1 As Range
Dim P2 As Range
Dim String1 As String 'Holds the string for the first part of the check if statment
Dim String2 As String 'Holds the string for the Second part of the check if statment
Dim String1Boolean As Boolean 'Used to check statments in the if checks
Dim String2Boolean As Boolean 'Used to check statments in the if checks
Dim MinutesElapsed As String 'timer method
Dim StartTime As Double 'timer method
Dim PredictedRecords As Integer 'The number of records predicted in the Background tab
Dim tbl As ListObject 'Consolidate Table
Dim rng As Range 'Range specifically for the table

If MsgBox("Warning, Previous Data may be overwritten. Continue?", vbYesNo, "Warning.") = vbNo Then
    Exit Sub
End If

'Remember time when macro starts
  StartTime = Timer

    With ActiveSheet
        LastRow = .Cells(.Rows.Count, 7).End(xlUp).Row
        .Range("B6:Q" & LastRow * 2).Clear
    End With
    
    i = 2 'Sets the sheet to #3, skipping background and POTW
    j = 2 'sets the paste location as row 2 on Background.
    TotalSheets = ThisWorkbook.Sheets.Count
    
    
    Do Until i = TotalSheets + 1
        
        With Worksheets(i)
            
            LastRow = Worksheets(i).Cells(.Rows.Count, 7).End(xlUp).Row
            Worksheets("Background").Range("D" & j).Value = LastRow
            LastRow = 0
            i = i + 1
            j = j + 1
            LastRow = 0
            'This stopped two rows short 'Should now be fixed
        
        End With
'GoTo DebugSkip
    
    Loop

     i = 2
    j = 8

    Do Until i = TotalSheets - 2

        FormulaOne = "=" & Worksheets("Background").Range("C" & i).Value
        LastRow = Worksheets("Background").Range("D" & i).Value

        Set P1 = Cells(i, j)
        Set P2 = Cells(i, LastRow)

        Sheets("Background").Activate
        With ActiveSheet
            Worksheets("Background").Range(.Cells(2, j), .Cells(LastRow, j)).Formula = FormulaOne
            'This just didnt work
        End With
        
        j = j + 1
        i = i + 1
        FormulaOne = ""
        LastRow = 0

    Loop
    
    PredictedRecords = Worksheets("Background").Range("AC2").Value
    MsgBox "There are an estimated " & PredictedRecords & " records available.", vbInformation, "Record Estimate."
    
DebugSkip:
    
    i = 3 'Starting Worksheet (Worksheet Position Indicator)
    j = 6 'Starting Cell Position (Cell Position in Second Loop)
    k = 6 'Paste Position of Rows on Strat POTW Sheet
    
    LastRow = Worksheets("Background").Range("D2").Value
    
    Do Until i = TotalSheets + 1 'this is overflowing at some point.
     
     If i = 4 Then
     p = 1
     End If
     
        Do Until j = LastRow
        
        
        String1 = Worksheets(i).Range("P" & j).Value
        String2 = Worksheets(i).Range("G" & j).Value
        
        If String1 = "Open" Then
            String1Boolean = True
        Else
            String1Boolean = False
        End If
        
        If String2 = "Y" Then
            String2Boolean = True
        ElseIf String2 = "Yes" Then
            String2Boolean = True
        ElseIf String2 = "For Noting" Then
            String2Boolean = True
        Else
            String2Boolean = False
        End If
        
        'String1 = StrConv(String1, vbProperCase)
        'String2 = StrConv(String2, vbProperCase)
        
        
        If String1Boolean = True And String2Boolean = True Then
            Worksheets(i).Rows(j).EntireRow.Copy
            Worksheets("Strategic POTW").Range("A" & k).PasteSpecial xlPasteAll 'Error Pasting, Run to completion for error 'Fixed by setting the value to A instead of B... Case sensative?
            k = k + 1
            
            Debug.Print "I: " & i & " - J: " & j & " - K: " & k & " - LR: " & LastRow
            
        End If
        
        j = j + 1
        Debug.Print "I: " & i & " - J: " & j & " - K: " & k & " - LR: " & LastRow
        
        Loop
        
        i = i + 1
        j = 6
        
        LastRow = Worksheets("Background").Range("D" & i - 1)
        Debug.Print "I: " & i & " - J: " & j & " - K: " & k & " - LR: " & LastRow
        
    Loop
    
    
    Worksheets("Strategic POTW").Activate
        
    
    With ActiveSheet
        LastRow = .Cells(.Rows.Count, 2).End(xlUp).Row
        Set tbl = .ListObjects("Consolidate")
        i = tbl.Range.Rows.Count
        
        If i > k Then
            j = i - k - 5
            Set rng = Range("Consolidate[#All]").Resize(tbl.Range.Rows.Count - j, tbl.Range.Columns.Count)
        ElseIf i < k Then
            j = k - i - 5
              Set rng = Range("Consolidate[#All]").Resize(tbl.Range.Rows.Count + j, tbl.Range.Columns.Count)
        ElseIf i = k Then
            GoTo Leave
        Else
            MsgBox "MS Excel has generated the following error" & vbCrLf & vbCrLf & "Error Number: 24739" & vbCrLf & "Error Source: Table Resize Event" & vbCrLf & "Error Description: Unspecified Error occured when updating the table size.", vbCritical, "An Error has Occured!"
            GoTo Leave
        End If
        
        tbl.Resize rng
        .Range("B6:Q" & LastRow + 100).ClearFormats
        
        
        'Code utalised from the source at: https://www.thespreadsheetguru.com/blog/2014/6/20/the-vba-guide-to-listobject-excel-tables
        .Range("B6").Activate
    End With
    
    
    
    
    
    GoTo Leave


ErrorHandler:
    MsgBox "MS Excel has generated the following error" & vbCrLf & vbCrLf & "Error Number: " & _
        Err.Number & vbCrLf & "Error Source: Critical Events Combination" & vbCrLf & "Error Description: " & _
        Err.Description, vbCritical, "An Error has Occured!"
    Exit Sub

Leave:

        Worksheets("Strategic POTW").Activate
        
        'Determine how many seconds code took to run
        MinutesElapsed = Format((Timer - StartTime) / 86400, "hh:mm:ss")
    
        'Notify user in seconds (modify as and when required)
        MsgBox "This process ran successfully in " & MinutesElapsed & " minutes" & vbNewLine & vbNewLine & k - 6 & " record have been processed out of a predicted " & PredictedRecords & vbNewLine & "This number may vary due to formula case sensetivity.", vbInformation

Application.ScreenUpdating = True
    
End Sub
